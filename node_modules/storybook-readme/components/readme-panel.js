var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import ReadmeContainer from './readme-container';
import { ADD_README_EVENT } from '../constants';
import { setReadme, getReadme } from '../readme-manager';

var markdownContainerStyle = {
  margin: '16px'
};

var ReadmePanel = function (_React$Component) {
  _inherits(ReadmePanel, _React$Component);

  function ReadmePanel() {
    var _ref;

    _classCallCheck(this, ReadmePanel);

    for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
      props[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ReadmePanel.__proto__ || Object.getPrototypeOf(ReadmePanel)).call.apply(_ref, [this].concat(props)));

    _this.state = {
      readme: []
    };
    _this.waitForReadme = null;


    _this.props.channel.on(ADD_README_EVENT, function (_ref2) {
      var kind = _ref2.kind,
          storyName = _ref2.storyName,
          readme = _ref2.readme;

      setReadme(kind, storyName, readme);

      if (_this.waitForReadme && _this.waitForReadme[0] == kind && _this.waitForReadme[1] == storyName) {
        _this.showReadme(kind, storyName);
        _this.waitForReadme = null;
      }
    });
    return _this;
  }

  _createClass(ReadmePanel, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var onStory = this.props.onStory;

      this.stopListeningOnStory = onStory(function (kind, storyName) {
        _this2.showReadme(kind, storyName);
      });
    }
  }, {
    key: 'showReadme',
    value: function showReadme(kind, storyName) {
      var readme = getReadme(kind, storyName);

      if (!readme.length) {
        this.waitForReadme = [kind, storyName];
      }

      this.setState({
        readme: readme
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.stopListeningOnStory) {
        this.stopListeningOnStory();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var readme = this.state.readme;


      if (!readme.length) {
        return React.createElement(ReadmeContainer, {
          style: markdownContainerStyle,
          markdown: ['README.md was not added']
        });
      }

      return React.createElement(ReadmeContainer, { style: markdownContainerStyle, markdown: readme });
    }
  }]);

  return ReadmePanel;
}(React.Component);

ReadmePanel.propTypes = {
  getReadme: PropTypes.func,
  onStory: PropTypes.func,
  channel: PropTypes.object
};
export default ReadmePanel;