var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import React from 'react';
import isPlainObject from 'lodash/isPlainObject';
import isString from 'lodash/isString';
import isArray from 'lodash/isArray';

import { ADD_README_EVENT } from './constants';
import Markdown from './components/markdown';
import ReadmeContainer from './components/readme-container';
import { SPLITTER, clearSplitter, normalize } from './readme-manager';

var common = {
  footer: null
};

var markdownContainerStyle = {
  margin: '16px 16px 36px'
};

var DefaultFooter = function DefaultFooter(_ref) {
  var children = _ref.children;

  return React.createElement(
    'div',
    {
      style: {
        borderTop: '1px dashed #e5e5e5',
        paddingTop: '16px'
      }
    },
    children
  );
};

var DefaultPreview = function DefaultPreview(_ref2) {
  var children = _ref2.children;

  return React.createElement(
    'div',
    {
      style: {
        position: 'relative',
        boxSizing: 'border-box',
        margin: '16px 16px 36px',
        padding: '50px 35px',
        border: '1px dashed #e5e5e5',
        backgroundColor: '#ffffff',
        transition: 'background-color 0.2s',
        textAlign: 'center'
      }
    },
    children
  );
};

var renderDocsContainer = function renderDocsContainer(_ref3, _ref4) {
  var storyFn = _ref3.storyFn,
      kind = _ref3.kind,
      story = _ref3.story,
      readme = _ref3.readme;
  var _ref4$PreviewComponen = _ref4.PreviewComponent,
      PreviewComponent = _ref4$PreviewComponen === undefined ? DefaultPreview : _ref4$PreviewComponen,
      _ref4$FooterComponent = _ref4.FooterComponent,
      FooterComponent = _ref4$FooterComponent === undefined ? DefaultFooter : _ref4$FooterComponent;

  var source = normalize(readme);

  var main = source[0];

  var _main$split = main.split(SPLITTER),
      _main$split2 = _slicedToArray(_main$split, 2),
      readmeBeforePreview = _main$split2[0],
      readmeAfterPreview = _main$split2[1];

  if (!readmeAfterPreview) {
    readmeAfterPreview = readmeBeforePreview;
    readmeBeforePreview = null;
  }

  var fullReadmeAfterPreview = [readmeAfterPreview].concat(_toConsumableArray(source.slice(1)));

  return React.createElement(
    'div',
    null,
    readmeBeforePreview && React.createElement(ReadmeContainer, {
      style: markdownContainerStyle,
      markdown: readmeBeforePreview
    }),
    React.createElement(
      PreviewComponent,
      null,
      storyFn()
    ),
    React.createElement(ReadmeContainer, { markdown: clearSplitter(fullReadmeAfterPreview) }),
    common.footer && React.createElement(
      FooterComponent,
      null,
      React.createElement(ReadmeContainer, { markdown: common.footer })
    )
  );
};

var withDocsContainer = function withDocsContainer(_ref5) {
  var readme = _ref5.readme,
      _ref5$storyFn = _ref5.storyFn,
      storyFn = _ref5$storyFn === undefined ? null : _ref5$storyFn,
      _ref5$config = _ref5.config,
      config = _ref5$config === undefined ? {} : _ref5$config;

  if (storyFn === null) {
    return function (storyFn, _ref6) {
      var kind = _ref6.kind,
          story = _ref6.story;

      return renderDocsContainer({
        storyFn: storyFn,
        kind: kind,
        story: story,
        readme: readme
      }, config);
    };
  } else {
    return function (_ref7) {
      var kind = _ref7.kind,
          story = _ref7.story;

      return renderDocsContainer({
        storyFn: storyFn,
        kind: kind,
        story: story,
        readme: readme
      }, config);
    };
  }
};

function withDocs() {
  switch (true) {
    /**
     * withDocs({
     *  preview: props => {}
     *  footer: props => {}
     * })(README)
     */
    case arguments.length === 1 && isPlainObject(arguments.length <= 0 ? undefined : arguments[0]):
      var config = arguments.length <= 0 ? undefined : arguments[0];
      return function (readme) {
        var storyFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return withDocsContainer({ readme: readme, storyFn: storyFn, config: config });
      };

    /**
     * .addDecorator(
     *  withDocs(README)
     * )
     * 
     * .addDecorator(
     *  withDocs([README1, README2])
     * )
     */
    case arguments.length === 1 && (isString(arguments.length <= 0 ? undefined : arguments[0]) || isArray(arguments.length <= 0 ? undefined : arguments[0])):
      return withDocsContainer({ readme: arguments.length <= 0 ? undefined : arguments[0], storyFn: null });

    /**
     * withDocs(README, storyFn)
     * withDocs([README1, README2], storyFn)
     */
    case arguments.length === 2:
      return withDocsContainer({ readme: arguments.length <= 0 ? undefined : arguments[0], storyFn: arguments.length <= 1 ? undefined : arguments[1] });

    default:
      throw new Error('wrong withDocs arguments');
  }
}

withDocs.addFooter = function (footer) {
  common.footer = footer;
};

export default withDocs;